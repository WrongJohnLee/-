链接：https://mp.weixin.qq.com/s/80g7uI1UHCpZ2POaPFfICA

关键词概念：拆分：把一个系统的不同模块拆出来部署到不同服务器，这叫分布式。把一个数据库的表拆出来，放在不同数据库上，这叫分库分表。
			Java 方法调用：一个Java项目类的方法互相调用。
			Web 服务：不同服务器的模块互相调用接口。
			消息队列：把消息放入先进先出的存储数据结构。读取消息的时候依次从队列里面去，还可以把队列序列化后持久化在硬盘上，宕机的时候也可以从硬盘读取后反序列化，不会丢失消息。
			
一个服务器顶不住项目的并发压力，就要把项目拆分出来，部署到不同服务器上减轻压力。两个模块通过web服务调用（RPC),但是会出现，被调用方出现异常，调用方等待导致资源被占用。
可以采用消息队列，利用一个中间服务器，把消息存放在消息队列里，然后定时读取消息队列处理。-----异步通讯，时效性要求不高场景。双方传输格式要协商好，次序不能乱，并且用序列化持久化防止异常数据丢失。



延伸：垂直拆分：把一张表的字段拆分成主表副表（分表），不同的表拆到不同的数据库中（分库），但最终数据量还是不变。数据量大的时候性能还是解决不了，所以可能采用读写分离，减轻压力。一般垂直拆分在设计表的时候做，查询的时候用join。
				原则：	1. 把不常用的字段单独放在一张表;
						2. 把text，blob等?字段拆分出来放在附表中;
						3. 经常组合查询的列放在一张表中;
	  水平拆分：把一个表按照某种规则把数据划分到不同表（分表）或数据库（分库）里（不改变表结构）。比如日志系统、计费系统可以按时间来分表；有些可以通过区域、年份等字段来划分（但要从用户行为上约束）
	  
				比如把一个用户表根据id来划分，使用取模的方法划分。划分成四个表user1,user2,user3,user4,通过用id取模的方法把数据分散到四张表内Id%4+1 = [1,2,3,4]然后查询，更新，删除。 
				例如：id = 17,17%4 + 1 = 2, $tableName = ‘users’.’2’ Select * from users2 where id = 17;
				在insert时还需要一张临时表uid_temp来提供自增的id,该表的唯一用处就是提供自增的ID;
				insert into uid_temp values(null);
				得到自增的ID后,又通过取模法进行分表插入;
				注意：进行水平拆分后的表,字段的列和类型和原表保持一致,但是要记得去掉auto_increment自增长。
	两者具体操作：
					以mysql为例，简单购物系统暂设涉及如下表：
					1. 产品表（数据量10w，稳定） 　
					2. 订单表（数据量200w，且有增长趋势） 　
					3. 用户表 （数据量100w，且有增长趋势）　
					垂直拆分：
					　　解决问题： 表与表之间的io竞争
					　　不解决问题： 单表中数据量增长出现的压力
					　　方案：

							把产品表和用户表放到一个server上
							订单表单独放到一个server上

					水平拆分：
					　　解决问题： 单表中数据量增长出现的压力
					　　不解决问题： 表与表之间的io争夺
					　　方案：

							用户表通过性别拆分为男用户表和女用户表； 　　
							订单表通过已完成和完成中拆分为已完成订单和未完成订单；　　
							产品表未完成订单放一个server上； 　　
							已完成订单表盒男用户表放一个server上； 　　
							根据新用户和老用户，因为新用户相应的活跃度高；

