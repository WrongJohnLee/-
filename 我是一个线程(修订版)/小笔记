关键词概念：
	包裹：操作数据和步骤（cpu给予的指令）
	线程：程序.exe表示一个进程。线程是进程中的一个实体。虚拟机javaw.exe就是一个进程，可以操作很多线程。
		  线程有就绪、阻塞和运行三种基本状态。
		  	新的线程被创建在等待cpu调度的时候叫做就绪状态。
		  	就绪状态的线程获得cpu调度的时候叫做运行状态
		  	阻塞分为等待阻塞，被执行wait，释放所有资源（包括持有锁），只能依靠其他线程调用notify() or notifyAll()来唤醒
		  			同步阻塞，运行的时候获取锁的时候，该锁被其他线程持有的时候，所以该线程会被jvm放入“锁池”。锁池可能有很多线程等待取锁对象，呈队列等待。获取锁了进入就绪状态。
		  			其他阻塞，执行sleep() or join() or 发出I/O请求时，jvm会把改线程置为阻塞状态。当sleep()超过了设置状态时间、join()等待线程终止或者超时或者I/O处理完成，线程则会进入就绪状态等待cpu调度
	优先级：优先级越高，获取cpu调度的概率越高。（不是最高就一定最先执行）
	车间：就绪车间：存放就绪状态线程的地方；运行车间：进入运行状态
	广播：cpu发出的指令
	线程池：开辟和存放回收线程的池
	memecached：缓存系统，直接在内存取数据的，提高读效率。速度：cpu>内存>硬盘
	分布式：一个业务分拆多个子业务，部署在不同的服务器上。
	JDBC connection：java数据库连接。java通过socket与数据库连接，读写数据。
	锁：可以是一个对象、class字节码。被jvm标识，被哪个线程持有。
	操作系统：老大，操作cpu调度各个进程。没有操作系统就没有载体，cpu、内存、硬盘都是没有意义的。
	线程调度员：cpu管理线程，可以通过设置优先级一些算法，调度线程执行顺序。
故事分析：
	线程0x3704被线程池创建后，被标识为0x3704。刚开始存在于线程池，线程池还有其他被创建或者被回收回来等待start的线程。0x3704被创建就进入就绪状态，就绪状态有其他等着被cpu调度的线程。0x3704被创建的时候，设置的
优先级参数高，所以很快获得cpu使用权。进入运行状态，0x3704被赋予执行请求登录操作代码的权限。在请求内容中request获取账号密码，然后拿去数据库取数据得到结果。因为数据库数据存放在硬盘上，硬盘读取数据很慢。因为是执行I/O操作进入阻塞状态，当得到数据后执行完了I/O操作进入就绪状态等待cpu调度。获取cpu调度后，处理视图---超时进入就绪状态---获取cpu调度---处理视图如此循环，最后结束线程，0x3704被回收到线程池等待。
	双十一，用户的请求很大。线程池的线程都没有间歇时间，几乎都是刚结束又被调用。线程在用户上传图片等耗时操作时，进入阻塞状态等待I\O操作完毕进入就绪状态等待cpu调度。线程在访问数据库，数据库读取数据的时候很慢
而且很耗资源（java通过socket连接数据库，每次都要开启关闭）。所以采用了缓存系统memecache，让memecached线程去内存缓存中取数据（内存速度>>硬盘速度）。并且采用了数据库连接池的策略，把数据库连接存放在池中，不用每次创建销毁，降低cpu、网卡压力。
	银行转账操作，线程查询账号余额（查询数据库），进入阻塞状态等待查询完进入就绪状态等待。（途中有其他线程对账户进行了加减操作）线程获取的数据已经过时了的，然后对数据库旧数据进行加减后更新到数据库。造成脏数
据。改进-----对操作账户进行加锁，重复上面操作，（途中有其他线程对账户加减操作，加了锁，获取账户锁失败），数据还是正确的，不会造成脏读。死锁-----对多个资源进行操作，两个线程操作的资源有所共同。线程1对线程2所需要的资源加锁，欲获取线程2所加锁的资源。双方都要完成操作才释放锁资源，然后一直在阻塞等待，最后造成了死锁。线程2被操作系统kill，释放了资源锁，线程1获得资源锁结束了死锁。优化资源锁---根据优先级算法，比如两个线程都需要访问两个资源，线程1首先对最大资源进行加锁，线程2也是获取最大资源的锁，所以会获取失败。这叫从最大资源开始加锁。
	服务器重启，线程池也结束了。重启后产生新的线程池。